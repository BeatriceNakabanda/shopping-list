{"remainingRequest":"/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/node_modules/babel-loader/lib/index.js!/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/node_modules/cache-loader/dist/cjs.js??ref--0-0!/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/node_modules/vue-loader/lib/index.js??vue-loader-options!/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/src/components/AddItemForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/src/components/AddItemForm.vue","mtime":1568280030013},{"path":"/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/media/beatrice/AA5A6A6A5A6A336D/ubuntu/Educ/try_vue/shopping-list/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'item-form',\n  //will recieve props inform of an array\n  data: function data() {\n    return {\n      /* Adding submiting state to check whether the form is currently being submitted, \n      An error state if something went wrong, and a success state  if it went well */\n      submitting: false,\n      error: false,\n      success: false,\n      item: {\n        name: '',\n        quantity: ''\n      }\n    };\n  },\n  methods: {\n    /* \n    creating submit function which will first clear whether success/error are set,\n    check our computed properties and if true an error will be set \n    or if not we can submit and set all the states back to default.\n    */\n    handleSubmit: function handleSubmit() {\n      // console.log('testing handle submit')\n      this.submitting = true;\n      this.clearStatus();\n\n      if (this.invalidItem || this.invalidQuantity) {\n        this.error = true;\n        return;\n      }\n      /* \n      passing items from the form to the table or to parent */\n\n\n      this.$emit( //name of event to emit\n      'add:item', //data to pass\n      this.item);\n      this.$refs.first.focus();\n      this.item = {\n        name: '',\n        quantity: ''\n      };\n      this.error = false;\n      this.success = true;\n      this.submitting = false;\n    },\n    clearStatus: function clearStatus() {\n      this.success = false;\n      this.error = false;\n    }\n  },\n  //checking whether fields are empty\n  computed: {\n    invalidItem: function invalidItem() {\n      return this.item.name === '';\n    },\n    invalidQuantity: function invalidQuantity() {\n      return this.item.quantity === '';\n    }\n  }\n};",{"version":3,"sources":["AddItemForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA;AACA,EAAA,IAHA,kBAGA;AACA,WAAA;AACA;;AAEA,MAAA,UAAA,EAAA,KAHA;AAIA,MAAA,KAAA,EAAA,KAJA;AAKA,MAAA,OAAA,EAAA,KALA;AAMA,MAAA,IAAA,EAAA;AACA,QAAA,IAAA,EAAA,EADA;AAEA,QAAA,QAAA,EAAA;AAFA;AANA,KAAA;AAYA,GAhBA;AAiBA,EAAA,OAAA,EAAA;AACA;;;;;AAKA,IAAA,YANA,0BAMA;AACA;AACA,WAAA,UAAA,GAAA,IAAA;AACA,WAAA,WAAA;;AAEA,UAAA,KAAA,WAAA,IAAA,KAAA,eAAA,EAAA;AACA,aAAA,KAAA,GAAA,IAAA;AACA;AACA;AACA;;;;AAEA,WAAA,KAAA,EACA;AACA,gBAFA,EAGA;AACA,WAAA,IAJA;AAMA,WAAA,KAAA,CAAA,KAAA,CAAA,KAAA;AACA,WAAA,IAAA,GAAA;AACA,QAAA,IAAA,EAAA,EADA;AAEA,QAAA,QAAA,EAAA;AAFA,OAAA;AAIA,WAAA,KAAA,GAAA,KAAA;AACA,WAAA,OAAA,GAAA,IAAA;AACA,WAAA,UAAA,GAAA,KAAA;AACA,KA/BA;AAgCA,IAAA,WAhCA,yBAgCA;AACA,WAAA,OAAA,GAAA,KAAA;AACA,WAAA,KAAA,GAAA,KAAA;AACA;AAnCA,GAjBA;AAsDA;AACA,EAAA,QAAA,EAAA;AACA,IAAA,WADA,yBACA;AACA,aAAA,KAAA,IAAA,CAAA,IAAA,KAAA,EAAA;AACA,KAHA;AAIA,IAAA,eAJA,6BAIA;AACA,aAAA,KAAA,IAAA,CAAA,QAAA,KAAA,EAAA;AACA;AANA;AAvDA,CAAA","sourcesContent":["<template>\n    <div id=\"item-form\">\n        <!-- the prevent helps in preventing the default GET/POST -->\n        <form @submit.prevent=\"handleSubmit\" id=\"myform\" >\n            <div class=\"form-group row\">\n                <label for=\"item-name\"><b>Item</b></label>\n                <input \n                ref=\"first\"\n                v-model= \"item.name\" \n                type= \"text\" \n                class= \"{ 'has-error': submitting && invalidName} form-control\" \n                placeholder= \"Bottle\" \n                @focus= \"clearStatus\"\n                @keypress= \"clearStatus\"\n                />\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"quantity\"><b>Quantity</b></label>\n                <input \n                v-model=\"item.quantity\"\n                type=\"text\" \n                class=\"{'has-error': submitting && invalidName} form-control\" \n                placeholder=\"2\" \n                @focus= \"clearStatus\"/>\n                <p v-if= \"error && submitting\" class= \"error-message\">\n                    Please fill in all fields\n                </p>\n                <p v-if= \"success\" class=\"success-message\">\n                    Item Successfully added\n                </p>\n            </div>\n                <button class=\"btn btn-primary\">Add Item</button>\n\n            \n        </form>\n    </div>\n</template>\n<script>\nexport default {\n    name: 'item-form',\n    //will recieve props inform of an array\n        data() {\n        return{\n            /* Adding submiting state to check whether the form is currently being submitted, \n            An error state if something went wrong, and a success state  if it went well */\n            submitting: false,\n            error: false,\n            success: false,\n            item: {\n                name: '',\n                quantity: '',\n            },\n\n        }\n    },\n    methods: {\n            /* \n            creating submit function which will first clear whether success/error are set,\n            check our computed properties and if true an error will be set \n            or if not we can submit and set all the states back to default.\n            */\n        handleSubmit(){\n            // console.log('testing handle submit')\n            this.submitting = true\n            this.clearStatus()\n\n            if (this.invalidItem || this.invalidQuantity){\n                this.error = true\n                return\n            }\n            /* \n            passing items from the form to the table or to parent */\n            this.$emit(\n                //name of event to emit\n                'add:item',\n                //data to pass\n                this.item\n            )\n            this.$refs.first.focus()\n            this.item = {\n                name: '',\n                quantity: '',\n            }\n            this.error = false\n            this.success = true\n            this.submitting = false\n        },\n        clearStatus() {\n            this.success = false\n            this.error = false\n        }\n    },\n    //checking whether fields are empty\n    computed: {\n        invalidItem() {\n            return this.item.name === ''\n        },\n        invalidQuantity() {\n            return this.item.quantity === ''\n        },\n    },\n}\n</script>\n<style>\n#myform{\n  padding-left: 400px;\n  padding-right: 500px;\n}\n[class*='-message']{\n   font-weight: 500; \n}\n.error-message{\n    color: #d33c40;\n}\n.success-message{\n    color: #32a95d;\n}\n</style>\n\n"],"sourceRoot":"src/components"}]}